/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

export default function Sniper(props) {
  const weaponRef = useRef();
  const { nodes, materials } = useGLTF("models/sniper.glb");
  const customUniforms = useMemo(() => {
    return {
      uTime: { value: 0 },
    };
  }, []);

  useEffect(() => {
    Object.values(materials).forEach((mat) => {
      mat.transparent = true;
      // mat.wireframe = true;
      // mat.depthWrite = false;

      mat.onBeforeCompile = (shader) => {
        shader.uniforms.uTime = customUniforms.uTime;
        shader.vertexShader = shader.vertexShader.replace(
          "#include <common>",
          `
          #include <common>
          uniform float uTime;
          varying vec2 vUv;
          varying vec3 vPosition;
        `
        );
        shader.vertexShader = shader.vertexShader.replace(
          "#include <begin_vertex>",
          `
          #include <begin_vertex>
          vPosition = (modelMatrix * vec4(position, 1.0)).xyz;
          vUv = uv;
        `
        );
        shader.fragmentShader = shader.fragmentShader.replace(
          "#include <common>",
          `
          #include <common>
          uniform float uTime;
          varying vec2 vUv;
          varying vec3 vPosition;
        `
        );
        shader.fragmentShader = shader.fragmentShader.replace(
          "#include <transmission_fragment>",
          `
          #include <transmission_fragment>
          totalDiffuse = totalDiffuse;
          float opacity = sin(vPosition.y * 700. - uTime * 10.) * 0.5 + 0.5;
          opacity = smoothstep(0.0, .25, opacity);
          // diffuseColor.a = opacity;
          
          
        `
        );
      };
      mat.needsUpdate = true;
    });
  }, []);

  useFrame((state) => {
    weaponRef.current.rotation.y = state.clock.elapsedTime; // Rotate the weapon
    customUniforms.uTime.value = state.clock.elapsedTime;
  });
  return (
    <group
      ref={weaponRef}
      {...props}
      dispose={null}
      position={[-0.0, -0.15, 0.3]}
      scale={0.2}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Magazine_Sniper_3.geometry}
        material={materials.Black}
        position={[0.199, 0.026, 0]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sniper_3_1.geometry}
          material={materials.Black}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sniper_3_2.geometry}
          material={materials.White}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sniper_3_3.geometry}
          material={materials.Grey}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sniper_3_4.geometry}
          material={materials.Main}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/sniper.glb");
